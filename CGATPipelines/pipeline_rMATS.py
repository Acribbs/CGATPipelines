##############################################################################
#
#   MRC FGU CGAT
#
#   $Id$
#
#   Copyright (C) 2009 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
###############################################################################
"""===========================
Pipeline rMATS
===========================

:Author: Jakub Scaber
:Release: $Id$
:Date: |today|
:Tags: Python

Overview
========

rMATS a computational tool to detect differential alternative splicing events
from RNA-Seq data. The statistical model of MATS calculates the P-value and
false discovery rate that the difference in the isoform ratio of a gene
between two conditions exceeds a given user-defined threshold. From the
RNA-Seq data, MATS can automatically detect and analyze alternative splicing
events corresponding to all major types of alternative splicing patterns.
MATS handles replicate RNA-Seq data from both paired and unpaired study design.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.ini` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_rMATS.py config

Input files
-----------

".bam" files generated using Tophat or Tophat2. Other mappers
may also work.

A design_file ("design.tsv") are used to specify  variates. The
minimal design file is shown below, where each line is a comparison
between the two tab-separated values.

The naming convention of the bam files is set within :file:`pipeline.ini`.
For example "heart-treated-R1" would require 'attributes' to be set to
'tissue,condition,replicate'. The tracks are then extracted using
:doc:`PipelineTracks` and sorted into experiments.

For the above example the "design.tsv" file may look like this:

heart-treated    heart-untreated
kidney-treated   kidney-untreated


Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

For paired end data, the pipeline also requires picard data on
insert size length and standard deviation which are obtained from
the csvdb of :doc:`pipeline_mapping`

Requirements:

* samtools = 1.1.19


Pipeline output
===============

For each experiment, the output from rMATS is placed in a folder
named "condition1_vs_condition2".

rMATS output is further described here:
http://rnaseq-mats.sourceforge.net/user_guide.htm



Glossary
========

.. glossary::


Code
====

"""
from ruffus import *
import sys
import os
import glob
import sqlite3
import CGAT.Experiment as E
import CGATPipelines.Pipeline as P
import CGATPipelines.PipelineTracks as PipelineTracks

# load options from the config file
PARAMS = P.getParameters(
    ["%s/pipeline.ini" % os.path.splitext(__file__)[0],
     "../pipeline.ini",
     "pipeline.ini"])

# add configuration values from associated pipelines
#
# 1. pipeline_annotations: any parameters will be added with the
#    prefix "annotations_". The interface will be updated with
#    "annotations_dir" to point to the absolute path names.
PARAMS.update(P.peekParameters(
    PARAMS["annotations_dir"],
    "pipeline_annotations.py",
    on_error_raise=__name__ == "__main__",
    prefix="annotations_",
    update_interface=True))


# if necessary, update the PARAMS dictionary in any modules file.
# e.g.:
#
# import CGATPipelines.PipelineGeneset as PipelineGeneset
# PipelineGeneset.PARAMS = PARAMS
#
# Note that this is a hack and deprecated, better pass all
# parameters that are needed by a function explicitely.

# -----------------------------------------------
# Utility functions
def connect():
    '''utility function to connect to database.

    Use this method to connect to the pipeline database.
    Additional databases can be attached here as well.

    Returns an sqlite3 database handle.
    '''

    dbh = sqlite3.connect(PARAMS["database"])
    statement = '''ATTACH DATABASE '%s' as annotations''' % (
        PARAMS["annotations_database"])
    cc = dbh.cursor()
    cc.execute(statement)
    cc.close()

    return dbh

set_attributes = PARAMS["attributes"].split(",")
set_attributes.remove("replicate")


class MySample(PipelineTracks.Sample):
    attributes = tuple(PARAMS["attributes"].split(","))


TRACKS = PipelineTracks.Tracks(MySample).loadFromDirectory(
    glob.glob("*.bam"), "(\S+).bam")
EXPERIMENTS = PipelineTracks.Aggregate(
    TRACKS,
    labels=set_attributes)


def generate_comparisons():
    input_list = []
    with open("design.tsv") as design:
        comparisons = [(tuple(line.strip().split('\t'))) for line in design]
    for comparison in comparisons:
        output_string = comparison[0] + "_vs_" + comparison[1] + ".done"
        for x in comparison:
            input_list += [str(y) + ".bam" for y in EXPERIMENTS[x + "-agg"]]
    yield tuple(input_list), output_string


# ---------------------------------------------------
# Specific pipeline tasks
@files(generate_comparisons)
def runMATS(infiles, outfile):
    '''run rMATS.'''

    # the command line statement we want to execute

    directory = os.path.dirname(os.path.abspath(outfile))
    out = P.snip(os.path.basename(outfile), ".done")
    conditions = out.split("_vs_")

    b1 = ",".join([directory+"/"+s for s in infiles if conditions[0] in s])
    b2 = ",".join([directory+"/"+s for s in infiles if conditions[1] in s])
    outdir = directory+"/"+out

    statement = '''python %(MATS_executable)s/RNASeq-MATS.py
    -b1 %(b1)s
    -b2 %(b2)s
    -gtf <(gunzip < %(gtf)s)
    -o %(outdir)s
    -t %(MATS_readtype)s
    -len %(MATS_readlength)s
    '''

    P.run()


# ---------------------------------------------------
# Generic pipeline tasks
@follows(runMATS)
def full():
    pass


@follows(mkdir("report"))
def build_report():
    '''build report from scratch.

    Any existing report will be overwritten.
    '''

    E.info("starting report build process from scratch")
    P.run_report(clean=True)


@follows(mkdir("report"))
def update_report():
    '''update report.

    This will update a report with any changes inside the report
    document or code. Note that updates to the data will not cause
    relevant sections to be updated. Use the cgatreport-clean utility
    first.
    '''

    E.info("updating report")
    P.run_report(clean=False)


@follows(update_report)
def publish_report():
    '''publish report in the CGAT downloads directory.'''

    E.info("publishing report")
    P.publish_report()

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
